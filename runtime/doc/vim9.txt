*vim9.txt*	For Vim version 8.2.  Last change: 2019 Dec 06


		  VIM REFERENCE MANUAL	  by Bram Moolenaar


THIS IS STILL UNDER DEVELOPEMNT - ANYTHING CAN BREAK - ANYTHING CAN CHANGE

Vim9 script commands and expressions.

Most expression help is in |eval.txt|.  This file is about the new syntax and
features in Vim9 script.

THIS IS STILL UNDER DEVELOPEMNT - ANYTHING CAN BREAK - ANYTHING CAN CHANGE


1.  Differences			|vim9-script|
2.  New style functions		|fast-functions|
3.  Types			|vim9-types|

9.  Rationale			|vim9-rationale|

==============================================================================

1. Differences from legacy Vim script			*vim9-script*

THIS IS STILL UNDER DEVELOPEMNT - ANYTHING CAN BREAK - ANYTHING CAN CHANGE

Vim9 functions ~

`:def` has no extra arguments like `:function` does: "range", "abort", "dict"
or "closure".  A `:def` function always aborts on an error, does not get a
range passed and cannot be a "dict" function.

In the function body:
- Arguments are accessed by name, without "a:".
- There is no "a:" dictionary or "a:000" list.
- Arguments from "..." are available with arg(N) and argcount()


Omitting :let and :call ~

Functions can be called without `:call`: >
  	writefile(lines, 'file')
Using `:call` is optional.

Global, script and local variables are assigned to without `:let`: >
      let lines = 33
      lines += 55
This may shadow Ex commands, rename the variable if needed.


No curly braces expansion ~

|curly-braces-names| cannot be used.


Variable declarations and scope ~

Local variables need to be declared with `:let`.  Local constants need to be
declared with `:const`.  We refer to both as "variables".

The variables are only visible in the block where they are defined and nested
blocks.  Once the block ends the variable is no longer accessible: >
	if cond
	   let inner = 5
	else
	   let inner = 0
	endif
	echo inner  " Error!

The declaration must be done earlier: >
	let inner: number
	if cond
	   inner = 5
	else
	   inner = 0
	endif
	echo inner

To intentionally use a variable that won't be available later, a block can be
used: >
	{
	   let temp = 'temp'
	   ...
	}
	echo temp  " Error!


Comperators ~

The 'ignorecase' option is not used for comperators that use strings.


White space ~

Vim9 script enforces proper use of white space.  This is no longer allowed: >
	let var=234	" Error!
	let var= 234	" Error!
	let var =234	" Error!
There must be white space before and after the "=": >
	let var = 234	" OK

White space is required around most operators.

White space is not allowed:
- Between a function name and the "(": >
  	call Func (arg)	   " Error!
  	call Func
	     \ (arg)	   " Error!
  	call Func(arg)	   " OK
  	call Func(
	     \ arg)	   " OK


Conditions and expressions ~

Conditions and expression are mostly working like they do in JavaScript.  A
difference is made where JavaScript does not work like most people expect.
Specifically, an empty list is falsey.

Any type of variable can be used as a condition, there is no error, not even
for using a list or job.  This is very much like JavaScript, but there are a
few exceptions.

	type		TRUE when ~
	bool		v:true
	number		non-zero
	float		non-zero
	string		non-empty
	blob		non-empty
	list		non-empty (different from JavaScript)
	dictionary	non-empty (different from JavaScript)
	funcref		when not NULL
	partial		when not NULL
	special		v:true
	job		when not NULL
	channel		when not NULL
	class		when not NULL
	object		when not NULL (TODO: when isTrue() returns v:true)

The boolean operators "||" and "&&" do not change the value: >
	8 || 2   == 8
	0 || 2   == 2
	0 || ''  == ''
	8 && 2   == 2
	0 && 2   == 0
	[] && 2  == []

When using `..` for string concatenation the arguments are converted to
string. >
	'hello ' .. 123  == 'hello 123'
	'hello ' .. v:true  == 'hello true'

Note that in Vim9 one can use "true" for v:true and "false" for v:false.


==============================================================================

2. New style functions					*fast-functions*

THIS IS STILL UNDER DEVELOPEMNT - ANYTHING CAN BREAK - ANYTHING CAN CHANGE

:def[!] {name}([arguments])[: {return-type}
			Define a new function by the name {name}.  The body of
			the function follows in the next lines, until the
			matching `:enddef`.

			When {return-type} is omitted the return type will be
			decided upon by the first encountered `return`
			statement in the function.  E.g., for: >
				return 'message'
<			The return type will be "string".
			
			{arguments} is a sequence of zero or more argument
			declarations.  There are three forms:
				{name}: {type}
				{name} = {value}
				{name}: {type} = {value}
			The first form is a mandatory argument, the caller
			must always provide them.
			The second and third form are optional arguments.
			When the caller omits an argument the {value} is used.

			[!] is used as with `:function`.

:enddef			End of a function defined with `:def`.


==============================================================================

3. Types					*vim9-types*

THIS IS STILL UNDER DEVELOPEMNT - ANYTHING CAN BREAK - ANYTHING CAN CHANGE

The following builtin types are supported:
	bool
	number
	float
	string
	blob
	list<type>
	dict<type>
	(a: type, b: type): type
	job
	channel

Not supported yet:
	tuple<a: type, ...>

These types can be used in declarations, but no variables will have this type:
	type|type
	void
	any

Furthermore custom types can be defined with `:type`: >
	:type MyList list<string>

And classes and interfaces can be used as types: >
	:class MyClass
	:let mine: MyClass

	:interface MyInterface
	:let mine: MyInterface

	:class MyTemplate<Targ>
	:let mine: MyTemplate<number>
	:let mine: MyTemplate<string>

	:class MyInterface<Targ>
	:let mine: MyInterface<number>
	:let mine: MyInterface<string>
<

Type inference						*type-inference*

In general: Whenever the type is clear it can be omitted.  For example, when
declaring a variable and giving it a value: >
	let var = 0		" infers number type
	let var = 'hello'	" infers string type

The return value of a function can be omitted if the type can be inferred from
the first encountered `:return` statement: >
	def MyFunc(arg: number)
	  if arg
	    return 'yes'     " infers return type is string
	  endif
	  return 'no'
	enddef
However, it's better to define the return type to avoid mistakes and make it
easy to see the type.

If there is no return statement or all return statements do not have a return
value then the return type is "void".

==============================================================================

9. Rationale						*vim9-rationale*

The :def command ~

Plugin writers have asked for a much faster Vim script.  Investigation have
shown that keeping the existing semantics of funtion calls make this close to
impossible, because of the overhead involved with calling a function, setting
up the local function scope and executing lines.  There are many details that
need to be handled, such as error messages and exceptions.  The need to create
a dictionary for a: and l: scopes, the a:000 list and several others add too
much overhead that cannot be avoided.

Therefore the `:def` method to define a new-style function had to be added,
which allows for a function with different semantics.  Most things still work
as before, but some parts do not.  A new way to define a function was
considered the best way to separate the old-style code from Vim9 script code.

Using "def" to define a function comes from Python. Other languages use
"function" which clashes with legacy Vim script.


Type checking ~

When compiling lines of Vim commands into instructions as much as possible
should be done at compile time.  Postponing it to runtime makes the execution
slower and means mistakes are found only later.  For example, when
encountering the "+" character and compiling this into a generic add
instruction, at execution time the instruction would have to inspect the type
of the arguments and decide what kind of addition to do.  And when the
type is dictionary throw an error.  If the types are known to be numbers then
an "add number" instruction can be used, which is faster.  The error can be
given at compile time, no error handling is needed at runtime.

The syntax for types is similar to Java, since it is easy to understand and
widely used.  The type names are what was used in Vim before, with some
additions such as "void" and "bool".


JavaScript/TypeScript syntax and semantics ~

Script writers have complained that the Vim script syntax is unexpectedly
different from what they are used to.  To reduce this complaint popular
languages will be used as an example.  At the same time, we do not want to
abondon the well-known parts of legacy Vim script.

Since Vim already uses `:let` and `:const` and optional type checking is
desirable, the JavaScript/TypeScript syntax fits best for variable
declarations. >
	const greeting = 'hello'  " string type is inferred
	let name: string
	...
	name = 'John'

Expression evaluation was already close to what JavaScript and other languages
are doing.  Some details are unexpected and can be fixed.  For example how the
|| and && operators work.  Legacy Vim script: >
	let result = 44
	...
	return result || 0	" returns 1

Vim9 script works like JavaScript, keep the value: >
	let result = 44
	...
	return result || 0	" returns 44

On the other hand, overloading "+" to use both for addition and string
concatenation goes against legacy Vim script and often leads to mistakes.
For that reason we will keep using ".." for string concatenation.  Lua also
uses ".." this way.


Classes ~

Vim supports interfaces to Perl, Python, Lua, Tcl and a few others.  But
these have never become widespread.  When Vim 9 was designed a decision was
made to phase out these interfaces and concentrate on Vim script, while
encouraging plugin authors to write code in any language and run it as an
external tool, using jobs and channels.

Still, using an external tool has disadvantages.  An alternative is to convert
the tool into Vim script.  For that to be possible without too much
translation, and keeping the code fast at the same time, the constructs of the
tool need to be supported.  Since most languages support classes the lack of
class support in Vim is then a problem.

Previously Vim supported a kind-of object oriented programming by adding
methods to a dictionary.  With some care this could be made to work, but it
does not look like real classes.  On top of that, it's very slow, because of
the use of dictionaries.

The support of classes in Vim9 script is a "minimal common functionality" of
class support in most languages.  It works mostly like Java, which is the most
popular programming language.



 vim:tw=78:ts=8:noet:ft=help:norl:
